#!/usr/bin/env python
'''
Project: GenerateStringFile
Created Date: Tuesday November 07 2017
Author: TheKhaeng.io
'''
from __future__ import print_function
import getpass
import csv
import sys
import os
import datetime

# Options
DATE = 'd'
OPTION = [DATE]

FILE_INDEX = -2
ROOT_PATH_INDEX = -1

ANDROID_INDEX = 0
IOS_INDEX = 1
ANDROID_COLUMN_INDEX = 1
IOS_COLUMN_INDEX = 2

ANDROID = "android"
IOS = "ios"
PLATFORM = [ANDROID, IOS]

Validate = 1
Invalidate = 0
Warning = 2
Warning_empty_variable = 3
Warning_empty_string = 4


def get_options(argv):
    return [argv[i].split("-")[1] for i in range(1, len(argv) + FILE_INDEX)]


def get_localize(row):
    localize = {}
    for i in range(3, len(row)):
        language = row[i].lower().strip()
        if len(language) != 0:
            localize[language] = i
    return localize


def init_directory(argv, options):
    folder_name = argv[FILE_INDEX].split("/")[-1].split(".")[0]
    if DATE in options:
        folder_name += "-" + str(datetime.date.today())

    if not os.path.exists("{0}/{1}".format(argv[ROOT_PATH_INDEX], folder_name)):
        os.makedirs(folder_name)

    if not os.path.exists("{0}/{1}/{2}".format(argv[ROOT_PATH_INDEX], folder_name, "android")):
        os.makedirs(folder_name + "/android")

    if not os.path.exists("{0}/{1}/{2}".format(argv[ROOT_PATH_INDEX], folder_name, "ios")):
        os.makedirs(folder_name + "/ios")

    return "{0}/{1}".format(argv[ROOT_PATH_INDEX], folder_name)


def init_result(result, localize):
    for platform in PLATFORM:
        result[platform] = {}
        for language, index in localize.iteritems():
            result[platform][language] = []
            if platform == ANDROID:
                result[platform][language].append('<?xml version="1.0" encoding="utf-8"?>')
                result[platform][language].append(
                    "<!-- Use {0} generated by {1} on {2} -->".format(sys.argv[0], getpass.getuser(), str(datetime.date.today())))
                result[platform][language].append("<resources>")
            elif platform == IOS:
                result[platform][language].append("/*")
                result[platform][language].append("\tUse {0} generated by {1} on {2}".format(
                    sys.argv[0], getpass.getuser(), str(datetime.date.today())))
                result[platform][language].append("*/")


#┌─────────────────┐
#│ Validate method │
#└─────────────────┘
def validate_argv(argv):
    argv_len = len(argv)
    if argv_len <= 1:
        print("\nPlease put your csv file ==> ex. test.csv\n")
        return Invalidate

    argv.append(os.getcwd())

    file_name = argv[FILE_INDEX]
    file_type = file_name.split(".")[-1]
    if ("." not in file_name) or (file_type != "csv"):      # validate file name
        print('\n"{x}" is not .csv type :(\n'.format(x=file_name))
        return Invalidate

    if argv_len > 2:           # validate option
        for i in xrange(1, argv_len + FILE_INDEX):
            if ("-" not in argv[i]) or (len(argv[i]) <= 1) or (argv[i].split("-")[1] not in OPTION):
                print('\n"{x}" this option not define :(\n'.format(x=argv[i]))
                return Invalidate

    return Validate


def validate_first_row_csv(index, row):
    if (row[0].lower() != "all"
            or row[1].lower() != "android"
            or row[2].lower() != "ios") and len(row) <= 3:
        print("\ncsv syntax error please check document :(\n")
        return Invalidate
    return Validate


def validate_comment_row(index, row):
    if "#" in row[0]:
        return Validate
    return Invalidate


def validate_string_row(index, row):
    if all(s.strip() == '' for s in row[:3]):
        print("[Warning]: Empty field name at csv line: " + str((index + 1)))
        return Warning_empty_variable

    if all(s.strip() == '' for s in row[3:]):
        print("[Warning]: Empty string at csv line: " + str((index + 1)))
        return Warning_empty_string

    return Validate


def validate_space_row(index, row):
    for r in row:
        if len(r.strip()) != 0:
            return Invalidate
    return Validate


#┌─────────────────┐
#│ Generate method │
#└─────────────────┘
def generate_comment(result, comment, localize):
    limit = 96

    start_android = "\t<!--"
    end_android = "-->"
    start_ios = "/*"
    end_ios = "*/"

    android = start_android + "=" * 12 + " " + comment + " "
    android += "=" * (limit - len(android) - len(end_android)) + end_android
    ios = start_ios + "=" * 14 + " " + comment + " "
    ios += "=" * (limit - len(ios) - len(end_ios)) + end_ios

    for platform, v1 in result.iteritems():
        for v2 in v1.values():
            if platform.lower() == ANDROID:
                v2.append(android)
            elif platform.lower() == IOS:
                v2.append(ios)


def generate_string(result, localize, row, is_all):
    for platform, language in result.iteritems():
        for lang, index in localize.iteritems():
            if platform.lower() == ANDROID:
                if "\n</resources>" in language[lang]:
                    language[lang].remove("\n</resources>")
                field_name = row[0 if is_all else ANDROID_COLUMN_INDEX].strip()
                if len(field_name) != 0:
                    language[lang].append(
                        '\t<string name="{0}">{1}</string>'.format(field_name, row[index]))
                language[lang].append("\n</resources>")
            elif platform.lower() == IOS:
                field_name = row[0 if is_all else IOS_COLUMN_INDEX].strip()
                if len(field_name) != 0:
                    language[lang].append(
                        '"{0}" = "{1}";'.format(field_name, row[index]))


def generate_space(result):
    for plateform in result.values():
        for language in plateform.values():
            language.append("")


def generate_file(root_path, result):

    for platform, language in result.iteritems():
        for lang, line in language.iteritems():
            android_dir = "res/value"
            ios_file_type = ".lproj"
            if platform.lower() == ANDROID:
                if lang.lower() != "en":
                    android_dir += "-" + lang.lower()
                android_path = "{0}/{1}/{2}".format(root_path, ANDROID, android_dir)

                if not os.path.exists(android_path):
                    os.makedirs(android_path)
                f = open("{0}/{1}".format(android_path, "string.xml"), "w+")

                for l in line:
                    f.write(l + "\n")
                f.close()

            elif platform.lower() == IOS:
                ios_dir = "{0}/{1}/{2}".format(root_path, IOS, lang + ios_file_type)

                if not os.path.exists(ios_dir):
                    os.makedirs(ios_dir)

                f = open("{0}/{1}".format(ios_dir, "Localizable.strings"), "w+")
                for l in line:
                    f.write(l + "\n")
                f.close()


if __name__ == "__main__":
    if validate_argv(sys.argv):
        path_file_name = sys.argv[FILE_INDEX]
        file_name = path_file_name.split("/")[-1]
        options = get_options(sys.argv)
        path = init_directory(sys.argv, options)
        is_success = True
        localize = {}
        result = {}
        try:
            f = open(path_file_name, "rb")
            for index, row in enumerate(csv.reader(f)):
                if index == 0:
                    if not validate_first_row_csv(index, row):
                        is_success = False
                        break
                    localize = get_localize(row)
                    init_result(result, localize)
                    continue

                validate_result = validate_space_row(index, row)
                if validate_result == Validate:
                    generate_space(result)
                    continue

                validate_result = validate_comment_row(index, row)
                if validate_result == Validate:
                    comment = row[0].replace(" ", "").split("#")[1]
                    generate_comment(result, comment, localize)
                    continue

                validate_result = validate_string_row(index, row)
                if (validate_result == Validate):
                    generate_string(result, localize, row, len(row[0].strip()) != 0)
                    continue
        except IOError:
            is_success = False
            print('\nNo such file or directory: "{x}\n"'.format(x=file_name))
        finally:
            f.close()

        if is_success:
            generate_file(path, result)
            print("\nSuccess generate :)")
        else:
            print("\nFail generate :(")
        print(path)
